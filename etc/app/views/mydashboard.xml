<views xmlns="http://software.in2p3.fr/lavoisier/application.xsd"
       xmlns:e="http://software.in2p3.fr/lavoisier/entries.xsd" xmlns:t="http://software.in2p3.fr/lavoisier/tables.xsd">

    <view name="myDashboard" xmlns:function="http://software.in2p3.fr/lavoisier/functions.xsd" xmlns:date="http://exslt.org/dates-and-times">
        <argument name="tenant">egi</argument>
        <argument name="id">_id_</argument>
        <connector type="XMLConnector">
            <parameter name="content" eval="view('tenants.reports')"/>
        </connector>

        <processors>
            <element in="tenants">
                <element-ignore in="tenant" if="@id!=$tenant"/>
                <element-create if="$id!='_id_'">view('list_dashboard', entry('id',$id))</element-create>
            </element>
        </processors>

        <renderers>
            <renderer type="HTMLRenderer">
                <parameter name="template">app/html/mydashboard.html</parameter>
            </renderer>
        </renderers>
    </view>

    <view name="list_dashboard" xmlns:str="http://exslt.org/strings">
        <argument name="id"/>
        <connector type="XMLConnector">
            <parameter name="content" eval="view('store_layout',entry('id',$id))"/>
        </connector>

        <processors>
            <element in="dashboard">
                <element-ignore in="widget" if="text()='_widget_'"/>
            </element>

            <element in="dashboard">
                <element in="widget">
                    <text-ignore/>
                    <element-create>str:split(../text(),'___')</element-create>
                </element>
            </element>
            <element in="dashboard">
                <element in="widget">
                    <element-ignore in="token">
                        <element-create>new_element(substring-before(../text(),'='),new_text(substring-after(../text(),'=')))</element-create>
                    </element-ignore>
                </element>
            </element>

        </processors>
    </view>


    <view name="register_layout">
        <argument name="id"/>
        <argument name="widget_0" >_widget_</argument>
        <argument name="widget_1" >_widget_</argument>
        <argument name="widget_2" >_widget_</argument>
        <argument name="widget_3" >_widget_</argument>
        <argument name="widget_4" >_widget_</argument>
        <argument name="widget_5" >_widget_</argument>
        <argument name="widget_6" >_widget_</argument>
        <argument name="widget_7" >_widget_</argument>
        <argument name="widget_8" >_widget_</argument>
        <argument name="widget_9" >_widget_</argument>


        <connector type="XMLConnector">
            <parameter name="content" eval="view('store_layout', entry('mode','W')|entry('id', $id) | entry('widget_0',$widget_0) | entry('widget_1',$widget_1) | entry('widget_2',$widget_2) |
            entry('widget_3',$widget_3) |  entry('widget_4',$widget_4) |  entry('widget_5',$widget_5) | entry('widget_6',$widget_6) |  entry('widget_7',$widget_7) |  entry('widget_8',$widget_8)  |entry('widget_9',$widget_9)    )"/>
        </connector>
    </view>

    <view name="store_layout" authenticators="admin" xmlns:str="http://exslt.org/strings">
        <argument name="id">#</argument>
        <argument name="mode" pattern="R|W|DEL">R</argument>
        <argument name="widget_0" >_widget_</argument>
        <argument name="widget_1" >_widget_</argument>
        <argument name="widget_2" >_widget_</argument>
        <argument name="widget_3" >_widget_</argument>
        <argument name="widget_4" >_widget_</argument>
        <argument name="widget_5" >_widget_</argument>
        <argument name="widget_6" >_widget_</argument>
        <argument name="widget_7" >_widget_</argument>
        <argument name="widget_8" >_widget_</argument>
        <argument name="widget_9" >_widget_</argument>

        <connector type="RotatingCacheConnector">
            <parameter name="content" eval="new_element('dashboard', new_element('widget',$widget_0)|new_element('widget',$widget_1) |new_element('widget',$widget_2)|new_element('widget',$widget_3)|new_element('widget',$widget_4)|new_element('widget',$widget_5) | new_element('widget_6',$widget_6) |  new_element('widget_7',$widget_7) |  new_element('widget_8',$widget_8)  |new_element('widget_9',$widget_9)   )" />
            <parameter name="key" eval="concat('dashboard_',$id)"/>
            <parameter name="size">500</parameter>
            <parameter name="mode" eval="$mode"/>
        </connector>
        
      

    </view>



    <view name="results" xmlns:function="http://software.in2p3.fr/lavoisier/functions.xsd" xmlns:date="http://exslt.org/dates-and-times">
        <argument name="tenant"/>
        <argument name="report"/>
        <argument name="start_date"/>
        <argument name="end_date"/>
        <argument name="group_type"/>
        <argument name="group_name"/>
        <argument name="type_results"/>
        <argument name="format_results"/>
        <argument name="av_threshold">90</argument>
        <argument name="re_threshold">95</argument>
        <argument name="topology1"/>
        <argument name="topology2"/>
        <argument name="granularity">daily</argument>
        <argument name="call">2</argument>
        <argument name="labelRange" eval="choose($type_results='dash_status','Last 3 Days','Last 3 Months')"/>

        <variable name="uniqueId" eval="date:seconds()"/>

        <connector type="XMLConnector">
            <parameter name="content" eval="view($type_results,arguments())"/>
        </connector>

        <processors>
            <element in="results">
                <attribute-create out="tenant">$tenant</attribute-create>
                <attribute-create out="report">$report</attribute-create>
                <attribute-create out="start_date">$start_date</attribute-create>
                <attribute-create out="end_date">$end_date</attribute-create>
                <attribute-create out="group_type">$group_type</attribute-create>
                <attribute-create out="group_name">$group_name</attribute-create>
                <attribute-create out="type_results">$type_results</attribute-create>
                <attribute-create out="format_results">$format_results</attribute-create>
                <attribute-create out="av_threshold">$av_threshold</attribute-create>
                <attribute-create out="re_threshold">$re_threshold</attribute-create>
                <attribute-create out="uniqueId">$uniqueId</attribute-create>
                <attribute-create out="topology1">$topology1</attribute-create>
                <attribute-create out="topology2">$topology2</attribute-create>
                <attribute-create out="call">$call</attribute-create>
                <attribute-create out="labelRange">$labelRange</attribute-create>
            </element>
        </processors>

        <renderers>
            <renderer type="HTMLRenderer">
                <parameter name="template">app/html/card.html</parameter>
            </renderer>
        </renderers>
    </view>


    <view name="buildUrlStatus">
        <argument name="group_type"/>
        <argument name="group_name"/>
        <argument name="report"/>
        <argument name="topology1"/>
        <argument name="topology2"/>

        <connector type="XMLConnector">
            <parameter name="content" eval="new_element('root')"/>
        </connector>

        <processors>
            <element in="root" attributes="arguments()">
                <element-create if="$group_type=$topology1">new_element('baseurl',new_text(concat(property('api.status'),'/',$report,'/',$topology2)))</element-create>
                <element-create if="$group_type=$topology2">new_element('baseurl',new_text(concat(property('api.status'),'/',$report,'/',$topology2,'/',$group_name)))</element-create>
                <element-create if="$group_type='services'">new_element('baseurl',new_text(concat(property('api.status'),'/',$report,'/',$topology2,'/',$group_name,'/services')))</element-create>
                <element-create if="$group_type='endpoints'">new_element('baseurl',new_text(concat(property('api.status'),'/',$report,'/',$group_name,'/endpoints')))</element-create>
                <element-create if="$group_type='metrics'">new_element('baseurl',new_text(concat(property('api.status'),'/',$report,'/',$group_name,'/metrics')))</element-create>

            </element>
        </processors>

    </view>

    <view name="dash_status" xmlns:function="http://software.in2p3.fr/lavoisier/functions.xsd"  xmlns:m="http://exslt.org/math" xmlns:date="http://exslt.org/dates-and-times" xmlns:str="http://exslt.org/strings">
        <argument name="tenant"/>
        <argument name="report"/>
        <argument name="start_date"/>
        <argument name="end_date"/>
        <argument name="group_type"/>
        <argument name="group_name"/>
        <argument name="format_results"/>
        <argument name="topology1"/>
        <argument name="topology2"/>
        <argument name="labelRange"/>


        <variable name="api-key" eval="view('tenants')/tenants/tenant[name/text()=upper-case($tenant)]/api_key/text()"/>
        <variable name="baseUrl" eval="view('buildUrlStatus',arguments())/root/baseurl/text()"/>
        <variable name="url" eval="concat($baseUrl,'?start_time=',$start_date,'&amp;end_time=',$end_date)"/>
        <variable name="longueur">100</variable>



    <connector type="HTTPConnector">
        <parameter name="url" eval="$url"/>
        <parameter name="force-redirect">true</parameter>
        <parameter name="header">
            <entry key="x-api-key" eval="$api-key"/>
            <entry key="Accept">application/json</entry>
        </parameter>
    </connector>
        <serializer type="JSONStreamSerializer"/>

        <processors>

            <element in="object" if="$group_type=$topology1">
                <set variable="indexSite">view('gocdb.site')/results/SITE</set>
                <attribute-create out="group1">$group_name</attribute-create>

                <elements path="groups">
                    <element-ignore in="object" if="$group_type='NGI'  and $tenant='egi' and not($indexSite[@NAME=current()/name/text()]/ROC/text()=$group_name)"/>
                </elements>
            </element>


            <element in="object" if="$group_type!=$topology1">
                <attribute-create out="group1" if="/object/groups/object/name/text()">/object/groups/object/name/text()</attribute-create>
                <attribute-create out="group2" if="count(/object/groups/object/services/object)=1">/object/groups/object/services/object/name/text()</attribute-create>
                <attribute-create out="group3" if="count(/object/groups/object/services/object/endpoints/object)=1">/object/groups/object/services/object/endpoints/object/name/text()</attribute-create>
            </element>


            <element in="object" out="root" if="groups/object/statuses">
                <element-ignore in="groups">
                    <element in="object" out="group">
                        <attribute from-element="true" if="name()!='statuses'"/>
                        <element-ignore in="statuses">
                            <element in="object" out="status">
                                <attribute from-element="true"/>
                                <element-ignore/>
                            </element>
                        </element-ignore>
                        <element-ignore/>
                    </element>
                </element-ignore>
            </element>


            <element in="object" out="root" if="groups/object/services/object/statuses">
                <element-ignore in="groups">
                    <element in="object" out="group">
                        <attribute from-element="true" if="name()!='services'"/>
                        <element-ignore in="services">
                            <element in="object" out="group">
                                <attribute from-element="true" if="name()!='statuses'"/>
                                <element-ignore in="statuses">
                                    <element in="object" out="status">
                                        <attribute from-element="true"/>
                                        <element-ignore/>
                                    </element>
                                    <element-ignore/>
                                </element-ignore>
                            </element>
                        </element-ignore>
                        <element-ignore/>
                    </element>
                </element-ignore>
            </element>

            <element in="object" out="root" if="groups/object/services/object/endpoints/object/statuses">
                <element-ignore in="groups">
                    <element in="object" out="group">
                        <attribute from-element="true" if="name()!='services'"/>
                        <element-ignore in="services">
                            <element in="object" out="group">
                                <attribute from-element="true" if="name()!='endpoints'"/>
                                <element-ignore in="endpoints">

                                    <element in="object" out="group">
                                        <attribute from-element="true" if="name()!='statuses'"/>
                                        <element-ignore in="statuses">
                                            <element in="object" out="status">
                                                <attribute from-element="true"/>
                                                <element-ignore/>
                                            </element>
                                            <element-ignore/>
                                        </element-ignore>
                                    </element>
                                    <element-ignore/>
                                </element-ignore>
                            </element>
                        </element-ignore>
                        <element-ignore/>
                    </element>
                </element-ignore>
            </element>

            <element in="object" out="root" if="groups/object/services/object/endpoints/object/metrics">
                <element-ignore in="groups">
                    <element in="object" out="group">
                        <attribute from-element="true" if="name()!='services'"/>
                        <element-ignore in="services">
                            <element in="object" out="group">
                                <attribute from-element="true" if="name()!='endpoints'"/>
                                <element-ignore in="endpoints">

                                    <element in="object" out="group">
                                        <attribute from-element="true" if="name()!='metrics'"/>

                                        <element-ignore in="metrics">
                                            <element in="object" out="group">
                                                <attribute from-element="true" if="name()!='statuses'"/>
                                                <element-ignore in="statuses">
                                                    <element in="object" out="status" if="value/text()!=preceding-sibling::object/value/text() or not(following-sibling::object) or not(preceding-sibling::object) and timestamp/text()">
                                                        <attribute from-element="true"/>
                                                        <element-ignore/>
                                                    </element>
                                                    <element-ignore/>
                                                </element-ignore>

                                            </element>

                                        </element-ignore>

                                    </element>
                                    <element-ignore/>
                                </element-ignore>
                            </element>
                        </element-ignore>
                        <element-ignore/>
                    </element>
                </element-ignore>
            </element>



            <element in="root">
                <element-ignore in="group" if="count(group)>0">
                    <element-ignore in="group" if="count(group)>0">
                        <element-ignore in="group" if="count(group)>0"><element/></element-ignore>
                        <element in="group"/>
                    </element-ignore>

                    <element in="group" if="count(group)=0"/>
                </element-ignore>
            </element>

            <element in="root">
                <element-ignore in="group"/>
                <element-create>sort_by_string(../group,'@name')</element-create>
            </element>

            <element in="root">
                <element-create-as-parent out="group" attributes="@*" group-by="@name">
                    <element in="group"/>
                </element-create-as-parent>
            </element>

            <element in="root">
                <element in="group">
                    <element-ignore in="group">
                        <element/>
                    </element-ignore>
                </element>
            </element>

            <elements path="root/group">
                <element in="status">
                    <attribute-create out="end_time" if="current()/../following-sibling::status[1]">
                        current()/../following-sibling::status[1]/@timestamp
                    </attribute-create>

                    <attribute-create out="last_time" if="not(current()/../following-sibling::status[1])">
                        choose(date:seconds(date:difference(date:add(../@timestamp,concat('P',1,'D')),function:date-UTC())) &gt;0 , ../@timestamp, date:add(../@timestamp,concat('PT',10,'M')))
                    </attribute-create>
                </element>
            </elements>

            <elements path="root/group">
                <element in="status">
                    <attribute-create out="duration" if="../@end_time">
                        m:abs( date:seconds(../@end_time)-date:seconds(../@timestamp))
                    </attribute-create>
                    <attribute-create out="duration" if="../@last_time">
                        m:abs(date:seconds(../@last_time)-date:seconds(../@timestamp))
                    </attribute-create>
                    <attribute-create out="last" if="../@last_time">
                        m:abs(date:seconds(current()/../@timestamp)-date:seconds(current()/../../status[1]/@timestamp))
                    </attribute-create>
                </element>
            </elements>

            <elements path="root/group">
                <attribute-create out="status">../status[not(following-sibling::status)]/@value</attribute-create>
                <element in="status">
                    <attribute in="duration">round(10 * $longueur * number(.) div current()/../../status/@last) div 10 </attribute>
                    <attribute-create out="color" if="../@value='OK'">'#28a745'</attribute-create>
                    <attribute-create out="color" if="../@value='CRITICAL'">'#dc3545'</attribute-create>
                    <attribute-create out="color" if="../@value='WARNING'">'#ffc107'</attribute-create>
                    <attribute-create out="color" if="../@value='MISSING'">'#343a40'</attribute-create>
                    <attribute-create out="color" if="../@value='DOWNTIME'">'#17a2b8'</attribute-create>
                    <attribute-create out="color" if="../@value='UNKNOWN'">'#3B7FBF'</attribute-create>

                    <attribute-create out="stroke" if="../@value='OK'">'#28a745'</attribute-create>
                    <attribute-create out="stroke" if="../@value='CRITICAL'">'#dc3545'</attribute-create>
                    <attribute-create out="stroke" if="../@value='WARNING'">'#ffc107'</attribute-create>
                    <attribute-create out="stroke" if="../@value='MISSING'">'#343a40'</attribute-create>
                    <attribute-create out="stroke" if="../@value='DOWNTIME'">'#17a2b8'</attribute-create>
                    <attribute-create out="stroke" if="../@value='UNKNOWN'">'#3B7FBF'</attribute-create>

                </element>
            </elements>

            <elements path="root/group">
                <element in="status">
                    <attribute-create out="position">sum(current()/../preceding-sibling::status/@duration)</attribute-create>
                </element>
            </elements>

            <element in="root" out="results">
                <attribute-create out="longueur">$longueur</attribute-create>
                <attribute-create out="url">$url</attribute-create>
            </element>

        </processors>
    </view>


    <view name="dash_avre">
        <argument name="tenant"/>
        <argument name="report"/>
        <argument name="start_date"/>
        <argument name="end_date"/>
        <argument name="group_type"/>
        <argument name="group_name"/>
        <argument name="format_results"/>
        <argument name="granularity"/>
        <variable name="api-key" eval="view('tenants')/tenants/tenant[name/text()=upper-case($tenant)]/api_key/text()"/>
        <variable name="url" eval="choose($group_name!='ALL',concat(property('api.report'),'/',$report,'/',$group_type,'/',$group_name,'?start_time=',$start_date,'&amp;end_time=',$end_date,'&amp;granularity=',$granularity),concat(property('api.report'),'/',$report,'/',$group_type,'?start_time=',$start_date,'&amp;end_time=',$end_date,'&amp;granularity=',$granularity))"/>
        <variable name="labelRange"/>

        <connector type="HTTPConnector">
            <parameter name="url" eval="$url"/>
            <parameter name="force-redirect">true</parameter>
            <parameter name="header">
                <entry key="x-api-key" eval="$api-key"/>
                <entry key="Accept">application/json</entry>
            </parameter>
        </connector>

        <serializer type="JSONStreamSerializer"/>

        <processors>
            <element in="object" out="results" if="$group_type='NGI' or $group_type='PROJECT'" attributes="new_attribute('name',$group_name)|new_attribute('type',$group_type)">
                <element-create as="first-child">new_attribute($group_type,$group_name)</element-create>
                <elements-ignore path="results/object">
                    <element in="results" out="ars">
                        <element in="object" out="ar">
                            <element if="name()!='timestamp'">
                                <text>round(. * 100 ) div 100</text>
                            </element>
                        </element>
                    </element>
                </elements-ignore>
            </element>

            <element in="object" out="results" if="$group_type='SITES' or $group_type='SERVICEGROUPS'" attributes="new_attribute('name',$group_name)|new_attribute('type',$group_type)">

                <elements-ignore path="results/object/endpoints/object">
                    <element in="results" out="ars">
                        <element in="object" out="ar">
                            <element if="name()!='timestamp'">
                                <text>round(. * 100 ) div 100</text>
                            </element>
                        </element>
                    </element>
                </elements-ignore>
            </element>

        </processors>

    </view>


</views>