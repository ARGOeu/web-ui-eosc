<views xmlns="http://software.in2p3.fr/lavoisier/application.xsd">
    <!-- 
        Project : argo-eosc 
        File    : commons.xml
        Created by cyril on 2018/03/29 
    -->

    <view name="reportTopology">

        <argument name="tenant"/>
        <argument name="report"/>

        <variable name="api-key" eval="property(concat($tenant,'.api.key'))"/>
        <variable name="url"  eval="concat(property('api.topology'),'/',$report)"/>

        <connector type="HTTPConnector">
            <parameter name="url" eval="$url"/>
            <parameter name="force-redirect">true</parameter>
            <parameter name="header">
                <entry key="x-api-key" eval="$api-key"/>
                <entry key="Accept">application/json</entry>
            </parameter>
        </connector>
        <serializer type="JSONStreamSerializer"/>

        <processors>
            <element in="object">
                <element in="data" if="$tenant='egi'">


                </element>
            </element>

        </processors>

        <renderers>
            <renderer type="DefaultRenderer">
                <parameter name="contentType">text/xml</parameter>
            </renderer>
        </renderers>
    </view>

    <view name="tenantsListRaw" authenticators="admin">

        <connector type="FileConnector">
            <parameter name="path">app/resources/tenants.xml</parameter>
        </connector>



        <cache type="FileCache">

            <trigger type="DeltaTimeTrigger">
                <parameter name="hours">3</parameter>
            </trigger>

            <trigger type="ViewCreatedTrigger"/>

            <trigger type="ViewNotifiedTrigger"/>
        </cache>
    </view>

    <view name="tenantsList" authenticators="admin">

        <connector type="XMLConnector">
            <parameter name="content" eval="view('tenantsListRaw')"/>
        </connector>


        <processors>
            <elements path="tenants/tenant">
                <element-ignore in="api_key"/>
                <element in="name">
                    <text>lower-case(.)</text>
                </element>
            </elements>
        </processors>

    </view>


    <view name="reportDetails">


        <connector type="XMLConnector">
            <parameter name="content" eval="view('tenantsListRaw')"/>
        </connector>

        <processors>

            <element in="tenants" out="reports">

                <elements-ignore path="tenant/reports">
                    <element in="report">
                        <attribute-create out="report">../id/text()</attribute-create>
                        <attribute-create out="tenant">../tenant/text()</attribute-create>
                        <attribute-create out="description">../../../description/text()</attribute-create>
                        <attribute-create out="contact">../../../contact/text()</attribute-create>
                        <attribute-create out="url">../../../url/text()</attribute-create>
                        <attribute-create out="topologyAR">../../../topologyAR/text()</attribute-create>
                        <attribute-create out="topologyStatus">../../../topologyStatus/text()</attribute-create>
                        <attribute-create out="topologyReference">../../../topologyReference/text()</attribute-create>
                        <attribute-create out="topologyDetails">../../../topologyDetails/text()</attribute-create>
                        <attribute-create out="thresholdAv">../thresholdAv/text()</attribute-create>
                        <attribute-create out="thresholdRe">../thresholdRe/text()</attribute-create>


                        <element-ignore/>
                    </element>

                </elements-ignore>

            </element>



            <element in="reports">
                <element in="report">
                    <element-create >view('reportTopology',entry('tenant',../@tenant)|entry('report',../@report))/object/data/*</element-create>
                </element>
            </element>

            <element in="reports">
                <element in="report">
                    <element>
                        <element-ignore in="item"/>
                        <element-create>sort_by_string(../item,'text()')</element-create>
                    </element>
                </element>
            </element>



        </processors>

            <cache type="FileCache">
                <trigger type="DeltaTimeTrigger">
                    <parameter name="hours">3</parameter>
                </trigger>
                <trigger type="ViewNotifiedTrigger"/>
                <trigger type="ViewCreatedTrigger"/>
            </cache>

            <renderers>
                <renderer type="DefaultRenderer">
                    <parameter name="contentType">text/xml</parameter>
                </renderer>
            </renderers>




    </view>

    <view name="dashboard-filter">

        <argument name="report">Critical</argument>
        <argument name="tenant">egi</argument>
        <argument name="entity">_entity_</argument>
        <argument name="status">_status_</argument>


        <connector type="XMLConnector">
            <parameter name="content" eval="new_element('root')"/>
        </connector>

        <processors>


            <element in="root">
                <attribute-create out="report">$report</attribute-create>
                <attribute-create out="tenant">$tenant</attribute-create>
                <attribute-create out="details">'level1'</attribute-create>
                <attribute-create out="group">$entity</attribute-create>

                <element-create>view('reportDetails')/reports/report</element-create>


            </element>
            
            <element in="root">
                <attribute-create out="topology">../report[@tenant=../@tenant][@report=../@report]/@topologyStatus</attribute-create>

                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='goc'">view('gocdb.downtimes.site', entry('site',$entity))</element-create>
                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='dpmt'">view('dpmt.downtimes.site',entry('site',$entity))</element-create>
                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='goc-sdc'">view('gocdb.sdc.downtimes.site',entry('site',$entity))</element-create>
                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='goc'">view('gocdb.site')/results/SITE[@NAME=$entity]</element-create>
                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='dpmt'">view('dpmt.siteProjects')/results/SERVICE_GROUP[NAME/text()=$entity]</element-create>
                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='goc-sdc'">view('gocdb.sdc.site')/results/SITE[@NAME=$entity]</element-create>
                <element-create>
                    view('api-status-last',entry('report',$report)|entry('tenant',$tenant)|entry('topology',../report[@tenant=../@tenant][@report=../@report]/@topologyStatus)|entry('entity',$entity)|entry('status',$status))
                </element-create>
                <element-create>
                    view('report-ar',entry('report',$report)|entry('tenant',$tenant)|entry('topology',../report[@tenant=../@tenant][@report=../@report]/@topologyStatus)|entry('entity',$entity))
                </element-create>


            </element>

            <element in="root" out="error" if="error" attributes="@*">
                <element-ignore in="error">
                    <element/>
                </element-ignore>
            </element>


        </processors>


        <renderers>
            <renderer type="HTMLRenderer">
                <parameter name="template">app/html/dashboard/dashboard.html</parameter>
            </renderer>
        </renderers>

    </view>




    <view name="dashboard">

        <argument name="report">Critical</argument>
        <argument name="tenant">egi</argument>
        <argument name="scope">_scope_</argument>
        <argument name="status">_status_</argument>


        <connector type="XMLConnector">
            <parameter name="content" eval="new_element('root')"/>
        </connector>

        <processors>



            <element in="root">
                <attribute-create out="report">$report</attribute-create>
                <attribute-create out="tenant">$tenant</attribute-create>
                <attribute-create out="details">'level0'</attribute-create>
                <element-create>view('reportDetails')/reports/report</element-create>

          
            </element>
            
            <element in="root" if="$scope='_scope_'">
                <attribute-create out="topology">../report[@tenant=../@tenant][@report=../@report]/@topologyStatus</attribute-create>

                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='goc'">view('gocdb.downtimes')</element-create>
                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='dpmt'">view('dpmt.downtimes')</element-create>
                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='goc-sdc'">view('gocdb.sdc.downtimes')</element-create>
                <element-create if="../report[@tenant=../@tenant][@report=../@report]/@topologyReference='goc-sla'">view('gocdb.sla.downtimes')</element-create>

                <element-create>
                    view('api-status-last',entry('report',$report)|entry('tenant',$tenant)|entry('topology',../report[@tenant=../@tenant][@report=../@report]/@topologyStatus)|entry('status',$status))
                </element-create>

                <element-create>
                    view('report-ar',entry('report',$report)|entry('tenant',$tenant)|entry('topology',../report[@tenant=../@tenant][@report=../@report]/@topologyAR))
                </element-create>


            </element>


            <element in="root" out="error" if="error" attributes="@*">
                <element-ignore in="error">
                    <element/>
                </element-ignore>
            </element>


        </processors>




        <renderers>
            <renderer type="HTMLRenderer">
                <parameter name="template">app/html/dashboard/dashboard.html</parameter>
            </renderer>
        </renderers>
    </view>

    <view name="custom">

        <argument name="report">Critical</argument>
        <argument name="tenant">egi</argument>


        <connector type="XMLConnector">
            <parameter name="content" eval="new_element('root')"/>
        </connector>

        <processors>

            <element in="root">
                <attribute-create out="report">$report</attribute-create>
                <attribute-create out="tenant">$tenant</attribute-create>
                <element-create>view('reportDetails')/reports/report</element-create>

            </element>
        </processors>

        <renderers>
            <renderer type="HTMLRenderer">
                <parameter name="template">app/html/custom.html</parameter>
            </renderer>
        </renderers>

    </view>


    <view name="reports">

        <argument name="tenant"/>
        <variable name="api-key" eval="property(concat($tenant,'.api.key'))"/>

        <connector type="HTTPConnector">
            <parameter name="url" eval="property('api.reports')"/>
            <parameter name="force-redirect">true</parameter>
            <parameter name="header">
                <entry key="x-api-key" eval="$api-key"/>
                <entry key="Accept">application/xml</entry>
            </parameter>

        </connector>


        <processors>
            <element in="root">
                <attribute-create out="tenant">lower-case($tenant)</attribute-create>
                <element-create>view('reportDetails')/reports/report</element-create>
            </element>
        </processors>

        <renderers>
            <renderer type="HTMLRenderer">
                <parameter name="template">app/html/reports.html</parameter>
            </renderer>
        </renderers>
    </view>

    <view name="reportAR" xmlns:date="http://exslt.org/dates-and-times" xmlns:str="http://exslt.org/strings">

        <argument name="report"/>
        <argument name="tenant"/>
        <argument name="topology"/>

        <argument name="site">_site_</argument>

        <argument name="nbdays">10</argument>
        <variable name="api-key"
                  eval="view('tenantsListRaw')/tenants/tenant[name/text()=upper-case($tenant)]/api_key/text()"/>
        <variable name="start_time"
                  eval="concat(str:replace(substring(date:add(date:date-time(),concat('-P',$nbdays,'D')),0,20),' ','T'),'Z')"/>
        <variable name="end_time" eval="concat(str:replace(substring(date:date-time(),0,20),' ','T'),'Z')"/>


        <connector type="HTTPConnector">
            <parameter name="url"
                       eval="concat(property('api.report'),'/',$report,'/',$topology,'?start_time=',$start_time,'&amp;end_time=',$end_time)"/>
            <parameter name="force-redirect">true</parameter>
            <parameter name="header">
                <entry key="x-api-key" eval="$api-key"/>
                <entry key="Accept">application/xml</entry>
            </parameter>
        </connector>


        <processors>

            <element out="root" if="$site!='_site_'">
                <element-ignore in="group">
                    <element in="group" if="@name=$site"/>
                </element-ignore>
            </element>

            <element out="root">
                <attribute-create out="tenant">$tenant</attribute-create>
                <attribute-create out="report">$report</attribute-create>
                <element-create>view('reportDetails')/reports/report</element-create>
                <element in="group">
                    <element in="results">
                        <attribute-create out="avF" if="../following-sibling::results">
                            concat(round(../@availability*100) div 100,',')
                        </attribute-create>
                        <attribute-create out="avF" if="not(../following-sibling::results)">round(../@availability*100)
                            div 100
                        </attribute-create>
                        <attribute-create out="reF" if="../following-sibling::results">concat(round(../@reliability*100)
                            div 100,',')
                        </attribute-create>
                        <attribute-create out="reF" if="not(../following-sibling::results)">round(../@reliability * 100)
                            div 100
                        </attribute-create>
                    </element>
                </element>
            </element>


            <element out="root">


                <element in="group">
                    <attribute-create out="spark-av">str:concat(../results/@avF)</attribute-create>
                    <attribute-create out="spark-re">str:concat(../results/@reF)</attribute-create>
                    <element in="results">
                        <attribute-ignore in="avF"/>
                        <attribute-ignore in="reF"/>
                    </element>
                </element>
            </element>


        </processors>

        <renderers>
            <renderer type="HTMLRenderer">
                <parameter name="template">app/html/report.html</parameter>
            </renderer>
        </renderers>
    </view>


    <view name="StateColor">


        <connector type="XMLConnector">
            <parameter name="content">
                <entry key="OK">green</entry>
                <entry key="WARNING">orange</entry>
                <entry key="UNKNOWN">lightgrey</entry>
                <entry key="MISSING">#53424a</entry>
                <entry key="CRITICAL">red</entry>
                <entry key="DOWNTIME">grey</entry>
            </parameter>

        </connector>
    </view>


    <view name="termsofUse">
        <argument name="tenant"/>
        <connector type="XMLConnector">
            <parameter name="content" eval="new_element('root',new_attribute('tenant',$tenant))"/>
        </connector>

        <renderers>
            <renderer type="DefaultRenderer">
                <parameter name="template">app/html/ToU.html</parameter>
            </renderer>
            <renderer type="HTMLRenderer">
                <parameter name="template">app/html/ToU.html</parameter>
            </renderer>
        </renderers>

    </view>


</views>